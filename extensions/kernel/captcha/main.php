<?php
/**
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Copyright (C)
 * 2011 Tarmo Alexander Sundström <ta@sundstrom.im>
 *
 * The Initial Developer of the Original Code is
 * Tarmo Alexander Sundström <ta@sundstrom.im>
 *
 * Portions created by the Initial Developer are Copyright (C) 2011
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 */
/**
 * CAPTCHA class
 *
 * @package       Kernel
 * @subpackage    Captcha
 */

class Captcha
{
    private $im; // GD image object
    private $letterCount = 0;
    private $captchaLength = 3;
    private $fontCount = 9; // Number of captcha fonts in directory, 1 to X .ttf

    /**
     * Generate captcha string and save it to session
     */
    public function genCaptcha()
    {
        // Captcha session vars
        $_SESSION["captcha"] = $_SESSION["captcha-lastview"] = "";

        // Generate random captcha string
        for ($i = 1; $i <= $this->captchaLength; $i++) {
            $int = rand(0,51);
            $a_z = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
            $_SESSION["captcha"] .= $a_z[$int];
        }
    }

    /**
     * Return captha generated by genCaptcha()
     *
     * @return mixed
     */
    public static function getCaptcha()
    {
        if (isset($_SESSION["captcha"]) && !empty($_SESSION["captcha"])) {
            return strtolower($_SESSION["captcha"]);
        }

        return false;
    }

    /**
     * Validate given captcha against the one in session
     *
     * @param  string $captcha
     * @return bool
     */
    public static function validate($captcha)
    {
        // Captcha NOT set
        if (!isset($_SESSION["captcha"]) || empty($_SESSION["captcha"])) {
            return false;
        }

        // Captcha matched
        if (strtolower($captcha) == self::getCaptcha()) {
            return true;
        }

        // Captcha did not match
        return false;
    }

    /**
     * Create captcha image using GD
     */
    public function createImage()
    {
        // Set the content-type
        header('Content-type: image/jpeg');

        // Nocache
        header("Expires: Sat, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . " GMT");
        header("Cache-Control: no-store, no-cache, must-revalidate");
        header("Cache-Control: post-check=0, pre-check=0", false);
        header("Pragma: no-cache");
        $this->im = imagecreatetruecolor(250, 100);

        // Define colors
        $white = imagecolorallocate($this->im, 255, 255, 255);
        $black = ImageColorAllocate($this->im, 0, 0, 0);

        imagefilledrectangle($this->im, 0, 0, 250, 100, $white);

        // Try prevent showing same image twice
        if ($_SESSION["captcha-lastview"] == $_SESSION["captcha"]) {
            $this->getCaptcha();
        }
        $chars = str_split($_SESSION["captcha"]);
        foreach ($chars as $char) {
            $this->drawLetter($char);
        }

        // add some random lines

        // Regular lines
        $numlines = 6;
        while ($numlines > 0) {
            ImageLine($this->im, rand(1,250), rand(1,50), rand(1,360), rand(1,360), $black);
            $numlines--;
        }

        // Dashed lines
        $numlines = 4;
        while ($numlines > 0) {
        ImageDashedLine($this->im, rand(1,250), rand(1,50), rand(1,360), rand(1,360), $black);
            $numlines--;
        }

        $_SESSION["captcha-lastview"] = $_SESSION["captcha"];

        imagejpeg($this->im);
        imagedestroy($this->im);
    }

    /**
     * Draw a letter using random font
     *
     * @param string $text
     */
    private function drawLetter($text)
    {
        // Pick random font
        $font = LIBVALOA_EXTENSIONSPATH."/kernel/captcha/".rand(1,$this->fontCount).".ttf";

        // Randomize angle and size
        $size = rand(32, 48);
        $angle = rand(-15, 15);
        $x = rand(64, 80) * $this->letterCount + 25;
        $y = rand(30, 60) + 25;
        $grey = imagecolorallocate($this->im, 128, 128, 128);
        $black = imagecolorallocate($this->im, 0, 0, 0);
        $tmp = rand(1, 3);
        if ($tmp == 1) {
            imagettftext($this->im, $size, $angle, $x + 4, $y + 4, $grey, $font, $text);
        }

        imagettftext($this->im, $size, $angle, $x, $y, $black, $font, $text);
        $this->letterCount++;
    }

    /**
     * Return captcha html snipplet
     *
     * @return string
     */
    public function __toString()
    {
        // random url to cheat cache-maniac browsers
        return (string) 'forum_captcha?'.time().rand(0,99).'.jpg';
    }

}
